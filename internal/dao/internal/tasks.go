// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// TasksDao is the data access object for table tasks.
type TasksDao struct {
	table   string       // table is the underlying table name of the DAO.
	group   string       // group is the database configuration group name of current DAO.
	columns TasksColumns // columns contains all the column names of Table for convenient usage.
}

// TasksColumns defines and stores column names for table tasks.
type TasksColumns struct {
	Id                string //
	StartUserId       string // 发起用户id
	StartUserName     string // 发起用户名称
	NodeId            string // 当前节点ID
	NodeName          string // 当前节点名称
	ProcessId         string // 流程ID
	ProcessName       string // 流程名称
	AssigneeRoleId    string // 应当处理该任务的角色
	AssigneeRoleName  string // 应当处理该任务的角色
	AssigneeRoleCount string // 表示当前任务需要多少种角色审批之后才能结束
	ActType           string // 表示任务类型 "or"表示或签，即一个人通过或者驳回就结束，"and"表示会签，要所有人通过就流             转到下一步，如果有一个人驳回那么就跳转到上一步
	Conditions        string // 当前任务的条件值，由外部写入，用于流程的判断分支
	Status            string // 任务的状态：run、pause、finish
	DeletedAt         string //
	CreatedAt         string //
	UpdatedAt         string //
}

// tasksColumns holds the columns for table tasks.
var tasksColumns = TasksColumns{
	Id:                "id",
	StartUserId:       "start_user_id",
	StartUserName:     "start_user_name",
	NodeId:            "node_id",
	NodeName:          "node_name",
	ProcessId:         "process_id",
	ProcessName:       "process_name",
	AssigneeRoleId:    "assignee_role_id",
	AssigneeRoleName:  "assignee_role_name",
	AssigneeRoleCount: "assignee_role_count",
	ActType:           "actType",
	Conditions:        "conditions",
	Status:            "status",
	DeletedAt:         "deleted_at",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

// NewTasksDao creates and returns a new DAO object for table data access.
func NewTasksDao() *TasksDao {
	return &TasksDao{
		group:   "default",
		table:   "tasks",
		columns: tasksColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TasksDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *TasksDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *TasksDao) Columns() TasksColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *TasksDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TasksDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TasksDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
